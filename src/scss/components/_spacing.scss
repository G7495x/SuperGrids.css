@import "variables";
@import "breakpoints";

@mixin m($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ margin: $size !important } }
@mixin mt($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ margin-top: $size !important } }
@mixin mr($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ margin-right: $size !important } }
@mixin mb($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ margin-bottom: $size !important } }
@mixin ml($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ margin-left: $size !important } }
@mixin mx($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ @include mr($size); @include ml($size) } }
@mixin my($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ @include mt($size); @include mb($size) } }

@mixin b($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ border: $size solid transparent !important } }
@mixin bt($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ border-top: $size solid transparent !important } }
@mixin br($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ border-right: $size solid transparent !important } }
@mixin bb($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ border-bottom: $size solid transparent !important } }
@mixin bl($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ border-left: $size solid transparent !important } }
@mixin bx($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ @include br($size); @include bl($size) } }
@mixin by($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ @include bt($size); @include bb($size) } }

@mixin p($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ padding: $size !important } }
@mixin pt($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ padding-top: $size !important } }
@mixin pr($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ padding-right: $size !important } }
@mixin pb($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ padding-bottom: $size !important } }
@mixin pl($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ padding-left: $size !important } }
@mixin px($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ @include pr($size); @include pl($size) } }
@mixin py($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ @include pt($size); @include pb($size) } }

@mixin spb-x($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ >*:not(:last-child){ margin-right: $size } } }
@mixin spb-y($size,$up: null,$down: null,$breakpoints: $grid-breakpoints){ @include resp($up,$down,$breakpoints){ >*:not(:last-child){ margin-bottom: $size } } }

@mixin fix-aspect($up: null,$down: null,$breakpoints: $grid-breakpoints){
	@include resp($up,$down,$breakpoints){
		&::after{
			content: "";
			float: left;
			clear: both;
			padding-top: 100%;
		}
	}
}

// Container is used for centering webpage content on big displays.
// NOT THE SAME AS BOOTSTRAP CONTAINER.
@mixin container($name: xl,$breakpoints: $grid-breakpoints){
	@include media-breakpoint-up($name,$breakpoints){
		margin-right: calc(50% - #{breakpoint-min($name,$breakpoints)/2}) !important;
		margin-left: calc(50% - #{breakpoint-min($name,$breakpoints)/2}) !important;
	}
}

// Same as container, but with border instead of margin
// Caution: Should be used only with overlay scrollbars
@mixin container-b($name: xl,$breakpoints: $grid-breakpoints){
	@include media-breakpoint-up($name,$breakpoints){
		border-right: calc(50vw - #{breakpoint-min($name,$breakpoints)/2}) solid transparent !important;
		border-left: calc(50vw - #{breakpoint-min($name,$breakpoints)/2}) solid transparent !important;
	}
}

// Same as container, but with padding instead of margin
@mixin container-p($name: xl,$breakpoints: $grid-breakpoints){
	@include media-breakpoint-up($name,$breakpoints){
		padding-right: calc(50% - #{breakpoint-min($name,$breakpoints)/2}) !important;
		padding-left: calc(50% - #{breakpoint-min($name,$breakpoints)/2}) !important;
	}
}

@each $breakpoint in map-keys($grid-breakpoints){
	$suffix: breakpoint-suffix($breakpoint);
	@include media-breakpoint-up($breakpoint){
		// Space-Between Rules
		@for $size from 0 through $spacing-steps{
			$size: $size*$spacing-step-size;
			.spb-x-#{$size}#{$suffix}{ @include spb-x($size*1px) }
			.spb-y-#{$size}#{$suffix}{ @include spb-y($size*1px) }
		}

		.m-auto#{$suffix}{ @include m(auto) }
		@for $size from 0 through $spacing-steps{
			$size: $size*$spacing-step-size;
			.m-#{$size}#{$suffix}{ @include m($size*1px) }
			@if $size!=0{ .m-m#{$size}#{$suffix}{ @include m($size*-1px) } }
			.b-#{$size}#{$suffix}{ @include b($size*1px) }
			.p-#{$size}#{$suffix}{ @include p($size*1px) }
		}

		.mx-auto#{$suffix}{ @include mx(auto) }
		@for $size from 0 through $spacing-steps{
			$size: $size*$spacing-step-size;
			.mx-#{$size}#{$suffix}{ @include mx($size*1px) }
			@if $size!=0{ .mx-m#{$size}#{$suffix}{ @include mx($size*-1px) } }
			.bx-#{$size}#{$suffix}{ @include bx($size*1px) }
			.px-#{$size}#{$suffix}{ @include px($size*1px) }
		}

		.my-auto#{$suffix}{ @include my(auto) }
		@for $size from 0 through $spacing-steps{
			$size: $size*$spacing-step-size;
			.my-#{$size}#{$suffix}{ @include my($size*1px) }
			@if $size!=0{ .my-m#{$size}#{$suffix}{ @include my($size*-1px) } }
			.by-#{$size}#{$suffix}{ @include by($size*1px) }
			.py-#{$size}#{$suffix}{ @include py($size*1px) }
		}

		.mt-auto#{$suffix}{ @include mt(auto) }
		@for $size from 0 through $spacing-steps{
			$size: $size*$spacing-step-size;
			.mt-#{$size}#{$suffix}{ @include mt($size*1px) }
			@if $size!=0{ .mt-m#{$size}#{$suffix}{ @include mt($size*-1px) } }
			.bt-#{$size}#{$suffix}{ @include bt($size*1px) }
			.pt-#{$size}#{$suffix}{ @include pt($size*1px) }
		}

		.mr-auto#{$suffix}{ @include mr(auto) }
		@for $size from 0 through $spacing-steps{
			$size: $size*$spacing-step-size;
			.mr-#{$size}#{$suffix}{ @include mr($size*1px) }
			@if $size!=0{ .mr-m#{$size}#{$suffix}{ @include mr($size*-1px) } }
			.br-#{$size}#{$suffix}{ @include br($size*1px) }
			.pr-#{$size}#{$suffix}{ @include pr($size*1px) }
		}

		.mb-auto#{$suffix}{ @include mb(auto) }
		@for $size from 0 through $spacing-steps{
			$size: $size*$spacing-step-size;
			.mb-#{$size}#{$suffix}{ @include mb($size*1px) }
			@if $size!=0{ .mb-m#{$size}#{$suffix}{ @include mb($size*-1px) } }
			.bb-#{$size}#{$suffix}{ @include bb($size*1px) }
			.pb-#{$size}#{$suffix}{ @include pb($size*1px) }
		}

		.ml-auto#{$suffix}{ @include ml(auto) }
		@for $size from 0 through $spacing-steps{
			$size: $size*$spacing-step-size;
			.ml-#{$size}#{$suffix}{ @include ml($size*1px) }
			@if $size!=0{ .ml-m#{$size}#{$suffix}{ @include ml($size*-1px) } }
			.bl-#{$size}#{$suffix}{ @include bl($size*1px) }
			.pl-#{$size}#{$suffix}{ @include pl($size*1px) }
		}
	}
}

.container{ @include container }

/* CAUTION: Should be used only with overlay scrollbars!!! */
.container-b{ @include container-b }

.container-p{ @include container-p }
