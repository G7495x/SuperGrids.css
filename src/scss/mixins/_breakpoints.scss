// Breakpoints - Media queries, Viewport sizes, etc.

// Forked & modified (mostly formatting + minor tweaks) from Bootstrap.
// https://github.com/twbs/bootstrap/blob/master/scss/mixins/_breakpoints.scss
// Rev. Jun 16, 2019 11:00 PM PDT - c5b1919
// Bootstrap is licensed MIT. https://github.com/twbs/bootstrap

// Breakpoints are a map of (name: minimum width), order from small to large (mobile-first approach). Ex:
//   (
//     xs: 0,
//     sm: 576px,
//     md: 768px,
//     lg: 992px,
//     xl: 1200px
//   )
// The map defined as the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// ----------------------------------------------------------------------------

// 01 - FUNCTIONS

// Name of the next breakpoint (null for the largest (last) breakpoint).
//   >> breakpoint-next(sm)
//   md
//   >> breakpoint-next(sm,(xs: 0,sm: 576px,md: 768px,lg: 992px,xl: 1200px))
//   md
@function breakpoint-next($name,$breakpoints: $grid-breakpoints){
	$breakpoint-names: map-keys($breakpoints);
	$n: index($breakpoint-names,$name);
	@return if($n and $n<length($breakpoint-names),nth($breakpoint-names,$n+1),null);
}

// Minimum of breakpoint width (lower bound of breakpoint, null for the smallest (first) breakpoint).
//   >> breakpoint-min(sm,(xs: 0,sm: 576px,md: 768px,lg: 992px,xl: 1200px))
//   576px
@function breakpoint-min($name,$breakpoints: $grid-breakpoints){
	$min: map-get($breakpoints,$name);
	@return if($min!=0,$min,null);
}

// Maximum of breakpoint width (upper bound of breakpoint, null for the largest (last) breakpoint).
// Value is the minimum of the next breakpoint minus 0.02px.
// Needed to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Use 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//   >> breakpoint-max(sm,(xs: 0,sm: 576px,md: 768px,lg: 992px,xl: 1200px))
//   767.98px
@function breakpoint-max($name,$breakpoints: $grid-breakpoints){
	$next: breakpoint-next($name,$breakpoints);
	@return if($next,breakpoint-min($next,$breakpoints)-.02,null);
}

// Breakpoint name with a dash infront (Blank if smallest (first) breakpoint).
// Useful for making responsive utilities.
//   >> breakpoint-suffix(xs)
//   ""  (Returns a blank string)
//   >> breakpoint-suffix(sm,(xs: 0,sm: 576px,md: 768px,lg: 992px,xl: 1200px))
//   "-sm"
@function breakpoint-suffix($name,$breakpoints: $grid-breakpoints){ @return if(breakpoint-min($name,$breakpoints),"-#{$name}",""); }

// ----------------------------------------------------------------------------

// 02 - MIXINS

// Media query from parameters.
// Makes the @content apply for all breakpoints from $lower to $upper
//   >> media-breakpoint(sm){ @content }
//   @media (min-width: 576px){ @content }
//   >> media-breakpoint(sm,md){ @content }
//   @media (min-width: 576px) and (max-width: 991.98px){ @content }
//   >> media-breakpoint(null,md){ @content } or media-breakpoint($upper: md){ @content }
//   @media (max-width: 991.98px){ @content }
@mixin media-breakpoint($lower: null,$upper: null,$breakpoints: $grid-breakpoints){
	$min: breakpoint-min($lower,$breakpoints);
	$max: if($upper,breakpoint-max($upper,$breakpoints),null);

	@if $min and $max{
		@if $min>$max{ @warn "Breakpoint #{$lower} > #{$upper}: @media (min-width: #{$min}) and (max-width: #{$max}){ @content } is invalid."; }
		@media (min-width: $min) and (max-width: $max){ @content }
	}@else if $min{
		@media (min-width: $min){ @content }
	}@else if $max{
		@media (max-width: $max){ @content }
	}@else{ @content }
}

// Media query with min-width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
//   >> media-breakpoint-up(sm){ @content }
//   @media (min-width: 576px){ @content }
@mixin media-breakpoint-up($name,$breakpoints: $grid-breakpoints){ @include media-breakpoint($name,null,$breakpoints){ @content } }

// Media query with max-width. No query for the largest breakpoint. (rarely used in mobile-first approach)
// Makes the @content apply to the given breakpoint and narrower.
//   >> media-breakpoint-down(sm){ @content }
//   @media (max-width: 767.98px){ @content }
@mixin media-breakpoint-down($name,$breakpoints: $grid-breakpoints){ @include media-breakpoint(null,$name,$breakpoints){ @content } }

// Media query with min-width and max-width (spans multiple breakpoints).
// Makes the @content apply for all breakpoints from $lower to $upper
//   >> media-breakpoint-between(sm,md){ @content }
//   @media (min-width: 576px) and (max-width: 991.98px){ @content }
@mixin media-breakpoint-between($lower,$upper,$breakpoints: $grid-breakpoints){ @include media-breakpoint($lower,$upper,$breakpoints){ @content } }

// Similar to media-breakpoint-between when $lower = $upper (spanning only one breakpoint)
//   >> media-breakpoint-only(sm){ @content }
//   @media (min-width: 576px) and (max-width: 767.98px){ @content }
@mixin media-breakpoint-only($name,$breakpoints: $grid-breakpoints){ @include media-breakpoint($name,$name,$breakpoints){ @content } }

// Make a custom class/etc. responsive (mobile-first approach)
//   >> @include responsive(".cc"){ custom: rule }
//   .cc{ custom: rule }
//   @media (min-width: 576px){ .cc-sm{ custom: rule } }
//   @media (min-width: 768px){ .cc-md{ custom: rule } }
//   @media (min-width: 992px){ .cc-lg{ custom: rule } }
//   @media (min-width: 1200px){ .cc-xl{ custom: rule } }
@mixin responsive($selector,$breakpoints: $grid-breakpoints){
	@each $breakpoint in map-keys($breakpoints){
		@include media-breakpoint-up($breakpoint,$breakpoints){
			#{$selector}#{breakpoint-suffix($breakpoint,$breakpoints)}{ @content }
		}
	}
}

// Make a custom class/etc. responsive (for a particular breakpoint only) (single breakpoints)
//   >> @include responsive-only(".cc"){ custom: rule }
//   @media (max-width: 575.98px) { .cc-xs-o { custom: rule } }
//   @media (min-width: 576px) and (max-width: 767.98px) { .cc-sm-o { custom: rule } }
//   @media (min-width: 768px) and (max-width: 991.98px) { .cc-md-o { custom: rule } }
//   @media (min-width: 992px) and (max-width: 1199.98px) { .cc-lg-o { custom: rule } }
//   @media (min-width: 1200px) { .cc-xl-o { custom: rule } }
@mixin responsive-only($selector,$breakpoints: $grid-breakpoints){
	@each $breakpoint in map-keys($breakpoints){
		@include media-breakpoint-only($breakpoint,$breakpoints){
			#{$selector}-#{$breakpoint}-o{ @content }
		}
	}
}

/// MAYBE: responsive-down (not advised for mobile-first approach)
